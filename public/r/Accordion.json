{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Accordion",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-accordion"
  ],
  "files": [
    {
      "path": "registry/ruzul/ui/accordion.tsx",
      "content": "import * as React from \"react\";\r\nimport * as Accordion from \"@radix-ui/react-accordion\";\r\nimport { ChevronDownIcon } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype AccordionItemProps = React.ComponentPropsWithoutRef<typeof Accordion.Item>;\r\ntype AccordionTriggerProps = React.ComponentPropsWithoutRef<\r\n  typeof Accordion.Trigger\r\n>;\r\ntype AccordionContentProps = React.ComponentPropsWithoutRef<\r\n  typeof Accordion.Content\r\n>;\r\n\r\nconst baseHover =\r\n  \"border-component-border border-b-6 border-l-6 border-t-[2px] border-r-[2px] hover:border-[2px] transition-all duration-100\";\r\nconst afterShine =\r\n  \"after:content-[''] after:absolute after:top-0 after:w-[150%] after:h-[100%] after:bg-[linear-gradient(120deg,transparent,var(--color-gleem),transparent)] after:skew-x-[-20deg] after:pointer-events-none after:animate-[shine_2s_infinite]\";\r\n// Accordion Item\r\nconst AccordionItem = React.forwardRef<HTMLDivElement, AccordionItemProps>(\r\n  ({ children, className, ...props }, ref) => (\r\n    <Accordion.Item\r\n      className={cn(\r\n        `mt-px overflow-hidden first:mt-0 first:rounded-t last:rounded-b ${baseHover} rounded my-2`,\r\n        className\r\n      )}\r\n      {...props}\r\n      ref={ref}\r\n    >\r\n      {children}\r\n    </Accordion.Item>\r\n  )\r\n);\r\nAccordionItem.displayName = \"AccordionItem\";\r\n\r\n// Accordion Trigger\r\nconst AccordionTrigger = React.forwardRef<\r\n  HTMLButtonElement,\r\n  AccordionTriggerProps\r\n>(({ children, className, ...props }, ref) => (\r\n  <Accordion.Header className=\"flex\">\r\n    <Accordion.Trigger\r\n      className={cn(\r\n        `group flex bg-component-primary text-component-primary-foreground h-[45px] flex-1 cursor-default items-center justify-between px-5 leading-none outline-none ${afterShine} overflow-hidden relative inline-flex`,\r\n        className\r\n      )}\r\n      {...props}\r\n      ref={ref}\r\n    >\r\n      {children}\r\n      <ChevronDownIcon\r\n        className=\"transition-transform duration-300 ease-[cubic-bezier(0.87,_0,_0.13,_1)] group-data-[state=open]:rotate-180\"\r\n        aria-hidden\r\n      />\r\n    </Accordion.Trigger>\r\n  </Accordion.Header>\r\n));\r\nAccordionTrigger.displayName = \"AccordionTrigger\";\r\n\r\n// Accordion Content\r\nconst AccordionContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  AccordionContentProps\r\n>(({ children, className, ...props }, ref) => (\r\n  <Accordion.Content\r\n    className={cn(\r\n      `overflow-hidden data-[state=closed]:animate-[slideUp_0.3s_ease-out] data-[state=open]:animate-[slideDown_0.3s_ease-out] `,\r\n      className\r\n    )}\r\n    {...props}\r\n    ref={ref}\r\n  >\r\n    <div className=\"px-5 py-[15px] bg-white text-black\">{children}</div>\r\n  </Accordion.Content>\r\n));\r\nAccordionContent.displayName = \"AccordionContent\";\r\n\r\nexport {\r\n  Accordion, // re-export radix primitives\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n  AccordionContent,\r\n};\r\n",
      "type": "registry:component",
      "target": "components/ruzul/accordion.tsx"
    }
  ]
}